
*배열

배열의 정의
동일한 이름으로 참조되는 연속된 메모리에 할당된 자료구조
같은 데이터타입을 묶어서 하나의 공간처럼 사용할 수 있는 자료구조

관련있는 데이터를 묶어서 처리할 때 유용함
많은 수의 변수이름을 생성할 필요가 없다
반복문 구현하기 아주 용이함

요소 (Elements) - 배열을 구성하는 각 항목
배열 (Array)명 - 전체 공간에 대한 대표 이름 (변수명)
크기 - 배열요소의 개수
첨자 (Index) - 각 요소에 부여되는 위치 정보

선언하기
데이터타입 배열명[크기];
배열크기 : 양의 정수, 매크로 상수, 관련 연산식으로 지정
변수, const상수는 불가

int a[10]; = 정수를 보관하는 공간, a라는 이름으로 열개 만드시오
공간의 위치정보 = 인덱스 ( 0부터 시작함)

#define SIZE 5
int a[100];
double b[20];
int c [SIZE +1];
char d[SIZE+1];

배열명[index]
범위 밖의 요소를 참조하려고 하면 run time 오류가 발생한다

int a[5];
a[0]=11;
a[1]=22;
a[2]=33;
a[3]=44;
a[4]=55;

*배열 초기화
형식 : 데이터타입 배열명[크기] = {초기값1, 초기값2,초기값3 ...}
각 요소는 순서대로 인덱스 0부터 초기화
초기화하지 않은 지역 배열 요소는 쓰레기값을 가진다
선언과 초기화를 같이 하는 경우 배열 크기는 생략가능

*다차원배열
배열을 이차원 형태로 확장
2차원은 index가 2개
index의 수가 배열의 차수

형식: 데이터타입 배열명[행크기][열크기];
short score[2][3]
index [0][0] [0][1] [0][2]
        [1][0] [1][1] [1][2]

int score[50][3]
= 50명의 학생의 국영수 시험 점수

*이차원 배열의 초기화
행 단위로 {}묶어서 초기화
short data[2][3] = { {1,2,3}, {4,5,6} };

일차원 배열처럼 {}안에 초기값만 나열할 수 있음
short data[2][3]= {1,2,3,4,5,6};

모두 가능함

초기값을 생략하면 나머지 원소를 0으로 초기화

이차원 배열에서 행 크기는 생략가능, 열 크기는 생략 불가하다


*삼차원 배열
필요에 따라 다차원 배열 선언이 가능
데이터타입 배열명 [면][행][열]
동일한 초기화 방법 사용

5개 학급의 50명 학생의 3과목 처리하기 
















